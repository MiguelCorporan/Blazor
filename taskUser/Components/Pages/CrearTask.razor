@* 
@page "/crear-tarea"
@using taskUser.Data
@using taskUser.Models;
@using Blazored.SessionStorage
@inject TareasAppContext db
@inject NavigationManager nav
@inject ISessionStorageService sessionStorage

<h3 class="text-center mb-4">Crear Nueva Tarea</h3>

<div class="container">
    <EditForm Model="nuevaTarea" OnValidSubmit="GuardarTarea" FormName="crearTareaForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <!-- Título de la tarea -->
        <div class="mb-3">
            <label for="titulo" class="form-label">Título</label>
            <InputText id="titulo" class="form-control" @bind-Value="nuevaTarea.Titulo" placeholder="Ingresa el título de la tarea" />
        </div>

        <!-- Descripción de la tarea -->
        <div class="mb-3">
            <label for="descripcion" class="form-label">Descripción</label>
            <InputTextArea id="descripcion" class="form-control" @bind-Value="nuevaTarea.Descripcion" placeholder="Ingresa una descripción detallada" rows="4" />
        </div>

        <!-- Botón para guardar la tarea -->
        <div class="d-flex justify-content-center">
            <button type="submit" class="btn btn-primary btn-lg">Guardar Tarea</button>
        </div>
    </EditForm>

    <!-- Mensaje de éxito o error -->
    @if (!string.IsNullOrEmpty(alertMessage))
    {
        <div class="alert alert-info mt-3">@alertMessage</div>
    }
</div>

@code {
    private Tarea nuevaTarea = new();
    private int adminId;
    private string alertMessage;

    protected override async Task OnInitializedAsync()
    {
        // No debemos hacer interacciones con sessionStorage aquí
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Obtener el ID del usuario desde sessionStorage como string
                var result = await sessionStorage.GetItemAsync<string>("adminKey");
                Console.WriteLine($"Valor de adminKey desde sessionStorage: {result}");

                // Convertir el valor de adminKey a int
                if (int.TryParse(result, out adminId) && adminId != 0)
                {
                    Console.WriteLine($"ID de usuario recuperado: {adminId}");
                }
                else
                {
                    alertMessage = "No estás logueado. Serás redirigido al login.";
                    nav.NavigateTo("/login"); // Redirige a login si no hay un ID válido
                }
            }
            catch (Exception ex)
            {
                alertMessage = "Error al leer sessionStorage: " + ex.Message;
                Console.WriteLine($"Error al leer sessionStorage: {ex.Message}");
            }
        }
    }

    private async Task GuardarTarea()
    {
        if (adminId == 0)
        {
            alertMessage = "No se pudo asociar la tarea al usuario. ID de usuario no encontrado.";
            return;
        }

        nuevaTarea.AdminInfoId = adminId;

        db.Tareas.Add(nuevaTarea);
        await db.SaveChangesAsync();

        alertMessage = "¡Tarea creada exitosamente!";
        nav.NavigateTo("/mis-tareas"); // Redirige a la página de mis tareas
    }
}
 *@



@*  @page "/crear-tarea"
@using taskUser.Data
@using taskUser.Models;
@using Blazored.SessionStorage
@inject TareasAppContext db
@inject NavigationManager nav
@inject ISessionStorageService sessionStorage

<h3 class="text-center mb-4">Crear Nueva Tarea</h3>

<div class="container">
    <EditForm Model="nuevaTarea" OnValidSubmit="GuardarTarea" FormName="createTaskForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <!-- Título de la tarea -->
        <div class="mb-3">
            <label for="titulo" class="form-label">Título</label>
            <InputText id="titulo" class="form-control" @bind-Value="nuevaTarea.Titulo" placeholder="Ingresa el título de la tarea" />
        </div>

        <!-- Descripción de la tarea -->
        <div class="mb-3">
            <label for="descripcion" class="form-label">Descripción</label>
            <InputTextArea id="descripcion" class="form-control" @bind-Value="nuevaTarea.Descripcion" placeholder="Ingresa una descripción detallada" rows="4" />
        </div>

        <!-- Botón para guardar la tarea -->
        <div class="d-flex justify-content-center">
            <button type="submit" class="btn btn-primary btn-lg">Guardar Tarea</button>
        </div>
    </EditForm>

    <!-- Mensaje de éxito o error -->
    @if (!string.IsNullOrEmpty(alertMessage))
    {
        <div class="alert alert-info mt-3">@alertMessage</div>
    }
</div>

@code {
    private Tarea nuevaTarea = new();
    private int adminId;
    private string alertMessage;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Este código ahora se ejecuta después de que el componente ha sido renderizado
                var result = await sessionStorage.GetItemAsync<string>("adminKey");

                if (string.IsNullOrEmpty(result))
                {
                    alertMessage = "No estás logueado. Serás redirigido al login.";
                    nav.NavigateTo("/login");
                }
                else
                {
                    // Intentamos convertir el adminKey (string) a un int
                    if (int.TryParse(result, out adminId) && adminId != 0)
                    {
                        Console.WriteLine($"ID de usuario recuperado: {adminId}"); // Verifica el ID
                    }
                    else
                    {
                        alertMessage = "ID de usuario no válido. Serás redirigido al login.";
                        nav.NavigateTo("/login");
                    }
                }
            }
            catch (Exception ex)
            {
                alertMessage = "Error al leer sessionStorage: " + ex.Message;
                Console.WriteLine($"Error al leer sessionStorage: {ex.Message}");
                nav.NavigateTo("/login");
            }
        }
    }

    private async Task GuardarTarea()
    {
        if (adminId == 0)
        {
            alertMessage = "No se pudo asociar la tarea al usuario. ID de usuario no encontrado.";
            return;
        }

        nuevaTarea.AdminInfoId = adminId;

        try
        {
            db.Tareas.Add(nuevaTarea);
            await db.SaveChangesAsync();

            alertMessage = "¡Tarea creada exitosamente!";
            nav.NavigateTo("/mis-tareas"); // Redirige a la página de mis tareas
        }
        catch (Exception ex)
        {
            alertMessage = $"Error al guardar la tarea: {ex.Message}";
        }
    }
}

 *@
@* 
@page "/crear-tarea"
@using taskUser.Data
@using taskUser.Models;
@using Blazored.SessionStorage
@inject TareasAppContext db
@inject NavigationManager nav
@inject ISessionStorageService sessionStorage

@rendermode InteractiveServer

<h3 class="text-center mb-4">Crear Nueva Tarea</h3>

@if (isLoading)
{
    <div class="text-center mt-5">
        <div class="spinner-border" role="status"></div>
        <p class="mt-3">Cargando...</p>
    </div>
}
else if (!isAuthorized)
{
    <div class="alert alert-danger text-center mt-5">
        No tienes acceso a esta página. Serás redirigido al login.
    </div>
}
else
{
    <div class="container">
        <EditForm Model="nuevaTarea" OnValidSubmit="GuardarTarea">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <!-- Título de la tarea -->
            <div class="mb-3">
                <label for="titulo" class="form-label">Título</label>
                <InputText id="titulo" class="form-control" @bind-Value="nuevaTarea.Titulo" placeholder="Ingresa el título de la tarea" />
            </div>

            <!-- Descripción de la tarea -->
            <div class="mb-3">
                <label for="descripcion" class="form-label">Descripción</label>
                <InputTextArea id="descripcion" class="form-control" @bind-Value="nuevaTarea.Descripcion" placeholder="Ingresa una descripción detallada" rows="4" />
            </div>

            <!-- Botón para guardar la tarea -->
            <div class="d-flex justify-content-center">
                <button type="submit" class="btn btn-primary btn-lg">Guardar Tarea</button>
            </div>
        </EditForm>

        <!-- Mensaje de éxito o error -->
        @if (!string.IsNullOrEmpty(alertMessage))
        {
            <div class="alert alert-info mt-3">@alertMessage</div>
        }
    </div>
}

@code {
    private Tarea nuevaTarea = new();
    private int adminId;
    private string alertMessage;
    private bool isLoading = true;
    private bool isAuthorized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var idStr = await sessionStorage.GetItemAsync<string>("adminKey");

                if (!string.IsNullOrEmpty(idStr) && int.TryParse(idStr, out adminId) && adminId > 0)
                {
                    isAuthorized = true;
                }
                else
                {
                    nav.NavigateTo("/login");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al obtener adminKey: {ex.Message}");
                nav.NavigateTo("/login");
            }
            finally
            {
                isLoading = false;
                StateHasChanged(); // Redibuja el componente después de terminar
            }
        }
    }

    private async Task GuardarTarea()
    {
        if (adminId == 0)
        {
            alertMessage = "No se pudo asociar la tarea al usuario. ID de usuario no encontrado.";
            return;
        }

        nuevaTarea.AdminInfoId = adminId;

        try
        {
            db.Tareas.Add(nuevaTarea);
            await db.SaveChangesAsync();

            alertMessage = "¡Tarea creada exitosamente!";
            nav.NavigateTo("/mis-tareas");
        }
        catch (Exception ex)
        {
            alertMessage = $"Error al guardar la tarea: {ex.Message}";
        }
    }
}
 *@

@page "/crear-tarea"
@using taskUser.Data
@using taskUser.Models
@using Blazored.SessionStorage
@inject TareasAppContext db
@inject NavigationManager nav
@inject ISessionStorageService sessionStorage
@inject IJSRuntime JS

@rendermode InteractiveServer

<h3 class="text-center mb-4">Crear Nueva Tarea</h3>

@if (isLoading)
{
    <div class="text-center mt-5">
        <div class="spinner-border" role="status"></div>
        <p class="mt-3">Cargando...</p>
    </div>
}
else if (!isAuthorized)
{
    <div class="alert alert-danger text-center mt-5">
        No tienes acceso a esta página. Serás redirigido al login.
    </div>
}
else
{
    <div class="container">
        <EditForm Model="nuevaTarea" OnValidSubmit="GuardarTarea">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <!-- Título de la tarea -->
            <div class="mb-3">
                <label for="titulo" class="form-label">Título</label>
                <InputText id="titulo" class="form-control" @bind-Value="nuevaTarea.Titulo" placeholder="Ingresa el título de la tarea" />
            </div>

            <!-- Descripción de la tarea -->
            <div class="mb-3">
                <label for="descripcion" class="form-label">Descripción</label>
                <InputTextArea id="descripcion" class="form-control" @bind-Value="nuevaTarea.Descripcion" placeholder="Ingresa una descripción detallada" rows="4" />
            </div>

            <!-- Botón para guardar la tarea -->
            <div class="d-flex justify-content-center">
                <button type="submit" class="btn btn-primary btn-lg">Guardar Tarea</button>
            </div>
        </EditForm>
    </div>
}

<!-- Modal de mensaje -->
<div class="modal fade" id="mensajeModal" tabindex="-1" role="dialog" aria-labelledby="mensajeModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="mensajeModalLabel">Mensaje</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
            </div>
            <div class="modal-body">
                @modalMessage
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Aceptar</button>
            </div>
        </div>
    </div>
</div>

@code {
    private Tarea nuevaTarea = new();
    private int adminId;
    private bool isLoading = true;
    private bool isAuthorized = false;
    private string modalMessage;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var idStr = await sessionStorage.GetItemAsync<string>("adminKey");

                if (!string.IsNullOrEmpty(idStr) && int.TryParse(idStr, out adminId) && adminId > 0)
                {
                    isAuthorized = true;
                }
                else
                {
                    nav.NavigateTo("/login");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al obtener adminKey: {ex.Message}");
                nav.NavigateTo("/login");
            }
            finally
            {
                isLoading = false;
                StateHasChanged();
            }
        }
    }

    private async Task GuardarTarea()
    {
        if (adminId == 0)
        {
            await MostrarModal("No se pudo asociar la tarea al usuario. ID de usuario no encontrado.");
            return;
        }

        nuevaTarea.AdminInfoId = adminId;

        try
        {
            db.Tareas.Add(nuevaTarea);
            await db.SaveChangesAsync();

            await MostrarModal("¡Tarea creada exitosamente!");
            nav.NavigateTo("/mis-tareas");
        }
        catch (Exception ex)
        {
            await MostrarModal($"Error al guardar la tarea: {ex.Message}");
        }
    }

    private async Task MostrarModal(string mensaje)
    {
        modalMessage = mensaje;
        await JS.InvokeVoidAsync("bootstrapInterop.mostrarModal", "mensajeModal");
    }
}
