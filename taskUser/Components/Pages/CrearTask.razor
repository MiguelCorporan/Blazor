

 @page "/crear-tarea"
@using taskUser.Data
@using taskUser.Models
@using Blazored.SessionStorage
@inject TareasAppContext db
@inject NavigationManager nav
@inject ISessionStorageService sessionStorage
@inject IJSRuntime JS

@rendermode InteractiveServer

<div class="crear-tarea-container d-flex flex-column flex-md-row min-vh-100">
    <!-- Panel izquierdo: Formulario -->
    <div class="form-panel d-flex align-items-center justify-content-center p-4 w-100 colorG">
        <div class="form-card w-100">
            <h3 class="text-center colorB fw-bold mb-4">✍️ Crear Nueva Tarea</h3>

            @if (isLoading)
            {
                <div class="text-center mt-5">
                    <div class="spinner-border text-success" role="status"></div>
                    <p class="mt-3">Cargando...</p>
                </div>
            }
            else if (!isAuthorized)
            {
                <div class="alert alert-danger text-center mt-5">
                    No tienes acceso a esta página. Serás redirigido al login.
                </div>
            }
            else
            {
                <EditForm Model="nuevaTarea" OnValidSubmit="GuardarTarea">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <!-- Título -->
                    <div class="form-group mb-3">
                        <label class="form-label"><i class="fas fa-heading me-2 text-success"></i>Título</label>
                        <div class="input-group">
                            <span class="input-group-text"><i class="fas fa-pencil-alt text-success"></i></span>
                            <InputText class="form-control" @bind-Value="nuevaTarea.Titulo" placeholder="Ej. Terminar informe" />
                        </div>
                    </div>

                    <!-- Descripción -->
                    <div class="form-group mb-4">
                        <label class="form-label"><i class="fas fa-align-left me-2 text-success"></i>Descripción</label>
                        <div class="input-group">
                            <span class="input-group-text"><i class="fas fa-align-justify text-success"></i></span>
                            <InputTextArea class="form-control" @bind-Value="nuevaTarea.Descripcion" placeholder="Agrega los detalles..." rows="4" />
                        </div>
                    </div>

                    <!-- Botón -->
                    <div class="d-grid">
                        <button type="submit" class="btn btn-success btn-lg text-white shadow-sm">
                            <i class="fas fa-save me-2"></i>Guardar Tarea
                        </button>
                    </div>
                </EditForm>
            }
        </div>
    </div>

 
    <div class="info-panel d-flex flex-column align-items-center text-white p-4 text-center text-md-start w-100">
        <div class="motivacional-text ">
            <h1 class="display-5 fw-bold colorB">🧠 Organiza tus ideas</h1>
            <p class="lead mt-3 muted">Cada tarea te acerca a tu meta. ¡Empieza hoy!</p>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="mensajeModal" tabindex="-1" aria-labelledby="mensajeModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title">Mensaje</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">@modalMessage</div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Aceptar</button>
            </div>
        </div>
    </div>
</div>

<style>
    .crear-tarea-container {
        background-color: #f8fffc;
    }

    .info-panel {
        flex: 1;
        @* background-color: #20c997!important; *@
        background-image: url('Image/taskApp5.jpg');
        background-size: cover;
        background-position: center;
        min-height: 300px;
    }

    .form-panel {
        flex: 1;
        background-color: #ffffff;
    }

    .form-card {
        max-width: 380px;
        width: 100%;
        background-color: #ffffff;
        border: 2px solid #20c997!important;
        padding: 30px;
        border-radius: 16px;
        box-shadow: 0 8px 20px rgba(32, 201, 151, 0.15);
    }

    .input-group-text {
        background-color: #e6fff8;
        border-color: #20c997!important;
    }

    .form-control:focus,
    textarea.form-control:focus {
        border-color: #20c997!important;
        box-shadow: 0 0 0 0.2rem rgba(32, 201, 151, 0.25);
    }

    .btn-success {
        background-color: #20c997!important;
        border-color: #20c997!important;
    }

        .btn-success:hover {
            background-color: #17b48a!important;
            border-color: #17b48a!important;
        }

    .colorB {
        color: #20c997;
    }

    .colorG{
        background-color:#20c997;
    }

    .muted{
        color:#fff;
    }

    .motivacional-text {
        margin-top: 8rem;
    }

    @@media (max-width: 768px) {
        .crear-tarea-container

    {
        flex-direction: column-reverse;
    }

    .info-panel,
    .form-panel {
        width: 100%;
        text-align: center;
    }

    }
</style>

@code {
    private Tarea nuevaTarea = new();
    private int adminId;
    private bool isLoading = true;
    private bool isAuthorized = false;
    private string modalMessage;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var idStr = await sessionStorage.GetItemAsync<string>("adminKey");

                if (!string.IsNullOrEmpty(idStr) && int.TryParse(idStr, out adminId) && adminId > 0)
                {
                    isAuthorized = true;
                }
                else
                {
                    nav.NavigateTo("/login");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al obtener adminKey: {ex.Message}");
                nav.NavigateTo("/login");
            }
            finally
            {
                isLoading = false;
                StateHasChanged();
            }
        }
    }

    private async Task GuardarTarea()
    {
        if (adminId == 0)
        {
            await MostrarModal("No se pudo asociar la tarea al usuario. ID de usuario no encontrado.");
            return;
        }

        nuevaTarea.AdminInfoId = adminId;

        try
        {
            db.Tareas.Add(nuevaTarea);
            await db.SaveChangesAsync();

            await MostrarModal("¡Tarea creada exitosamente!");
            nav.NavigateTo("/mis-tareas");
        }
        catch (Exception ex)
        {
            await MostrarModal($"Error al guardar la tarea: {ex.Message}");
        }
    }

    private async Task MostrarModal(string mensaje)
    {
        modalMessage = mensaje;
        await JS.InvokeVoidAsync("bootstrapInterop.mostrarModal", "mensajeModal");
    }
}
