@page "/login"
@using taskUser.Models;
@using taskUser.PanelServices;
@using Microsoft.AspNetCore.Components.Forms
@using Blazored.SessionStorage
@inject AdminPanelServices adminPanelServices;
@inject NavigationManager navigation
@inject ISessionStorageService sessionStorage;

@inject IJSRuntime JS

@rendermode InteractiveServer


<h3>Iniciar sesión</h3>

<div class="container">
    <EditForm Model="loginModel" OnValidSubmit="HandleLogin" FormName="loginForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <label for="email">Email:</label>
            <InputText id="email" class="form-control" type="email" @bind-Value="loginModel.EmailId" />
        </div>

        <div>
            <label for="password">Contraseña:</label>
            <InputText id="password" class="form-control" type="password" @bind-Value="loginModel.Password" />
        </div>

        <button type="submit" class="btn btn-primary mt-2">Iniciar sesión</button>

        @if (!string.IsNullOrEmpty(alertMessage))
        {
            <div class="alert alert-info mt-3">@alertMessage</div>
        }

        <p class="mt-3">¿No tienes una cuenta? <a href="/register">Regístrate</a></p>
    </EditForm>

    <pre style="margin-top: 2rem; background: #f5f5f5; padding: 10px;">
        @System.Text.Json.JsonSerializer.Serialize(loginModel, new System.Text.Json.JsonSerializerOptions { WriteIndented = true })
    </pre>
</div>

@code {
    [SupplyParameterFromForm]
    public LoginModel loginModel { get; set; } = new();
    private string alertMessage;

    protected override async Task OnAfterRenderAsync(bool firsRender)
    {
        var isLoggedIn = await JS.InvokeAsync<string>("sessionStorage.getItem", "isLoggedIn");

        if (!string.IsNullOrEmpty(isLoggedIn) && isLoggedIn.ToLower() == "true")
        {
            // Redirige al inicio si ya está logueado
            navigation.NavigateTo("/");
        }
    }


    private async Task HandleLogin()
    {
        Console.WriteLine($"Email: {loginModel.EmailId}");
        Console.WriteLine($"Password: {loginModel.Password}");

        var response = await adminPanelServices.Login(loginModel);
        if(response.Success)
        {
            var userResponse = response.Message.Split("|");
            await sessionStorage.SetItemAsync("adminKey", userResponse[0]);
            await sessionStorage.SetItemAsync("AdminName", userResponse[1]);
            await sessionStorage.SetItemAsync("adminEmail", userResponse[2]);
            await JS.InvokeVoidAsync("sessionStorage.setItem", "isLoggedIn", "true");
			Console.WriteLine($"User ID: {userResponse[0]}");
			
            
            navigation.NavigateTo("/");
            navigation.Refresh(forceReload:true);
        }
        else
        {
            alertMessage = response.Message;
        }

        
    }
}
