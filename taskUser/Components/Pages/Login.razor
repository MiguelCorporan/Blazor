@page "/login"
@using taskUser.Models;
@using taskUser.PanelServices;
@using Microsoft.AspNetCore.Components.Forms
@using Blazored.SessionStorage
@inject AdminPanelServices adminPanelServices;
@inject NavigationManager navigation
@inject ISessionStorageService sessionStorage;
@inject IJSRuntime JS

@rendermode InteractiveServer

<style>
    .login-page {
        background-image: url('Image/taskApp4.jpg');
        background-size: cover;
        background-position: center;
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: flex-end;
        padding-right: 8rem;
    }

    .login-form-container {
        background-color: #fff;
        padding: 3rem;
        border-radius: 16px;
        max-width: 380px;
        width: 100%;
        box-shadow: 0 0 30px rgba(0, 0, 0, 0.5);
    }

    .form-control-dark {
        background-color: #1e293b;
        border: none;
        padding-left: 2.8rem !important;
        color: white;
        height: 2.6rem;
        font-size: 0.95rem;
        border-radius: 8px;
    }

        .form-control-dark::placeholder {
            color: #cbd5e1;
        }

    .input-icon {
        position: relative;
    }

        .input-icon i {
            position: absolute;
            left: 10px;
            top: 50%;
            transform: translateY(-50%);
            color: #94a3b8;
            font-size: 1.2rem;
        }

    .btn-purple {
        background: linear-gradient(to right, #a4cfff, #20c997);
        border: none;
        color: white;
    }

        .btn-purple:hover {
            background: linear-gradient(to right, #20c997, #a4cfff);
        }

    .muted {
        color: #111 !important;
    }

        .muted a {
            color: #3470b4;
            text-decoration: none;
        }

    .colorB {
        color: #20c997;
    }

    @@media (max-width: 768px) {
        .login-page

    {
        justify-content: center;
        padding-right: 0;
    }

    .login-form-container {
        margin: 2rem;
    }

    }
</style>

<div class="login-page">
    <div class="login-form-container">
        <h4 class="text-center fw-bold mb-2 colorB">Iniciar sesión</h4>
        <p class="text-center text-muted mb-4" style="font-size: 0.9rem;">Accede a tu cuenta</p>

        <EditForm Model="loginModel" OnValidSubmit="HandleLogin" FormName="loginForm">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3 input-icon">
                <i class="bi bi-envelope-fill"></i>
                <InputText class="form-control form-control-dark" type="email" placeholder="Email" @bind-Value="loginModel.EmailId" />
            </div>

            <div class="mb-3 input-icon">
                <i class="bi bi-lock-fill"></i>
                <InputText class="form-control form-control-dark" type="password" placeholder="Contraseña" @bind-Value="loginModel.Password" />
            </div>

            <button type="submit" class="btn btn-purple w-100">Iniciar sesión</button>

            @if (!string.IsNullOrEmpty(alertMessage))
            {
                <div class="alert alert-info mt-3">@alertMessage</div>
            }

            <p class="text-center muted mt-3" style="font-size: 0.85rem;">
                ¿No tienes una cuenta? <a href="/register">Regístrate</a>
            </p>
        </EditForm>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    public LoginModel loginModel { get; set; } = new();
    private string alertMessage;

    protected override async Task OnAfterRenderAsync(bool firsRender)
    {
        var isLoggedIn = await JS.InvokeAsync<string>("sessionStorage.getItem", "isLoggedIn");

        if (!string.IsNullOrEmpty(isLoggedIn) && isLoggedIn.ToLower() == "true")
        {
            navigation.NavigateTo("/");
        }
    }

    private async Task HandleLogin()
    {
        var response = await adminPanelServices.Login(loginModel);
        if (response.Success)
        {
            var userResponse = response.Message.Split("|");
            await sessionStorage.SetItemAsync("adminKey", userResponse[0]);
            await sessionStorage.SetItemAsync("AdminName", userResponse[1]);
            await sessionStorage.SetItemAsync("adminEmail", userResponse[2]);
            await JS.InvokeVoidAsync("sessionStorage.setItem", "isLoggedIn", "true");
            navigation.NavigateTo("/");
            navigation.Refresh(forceReload: true);
        }
        else
        {
            alertMessage = response.Message;
        }
    }
}
