
@page "/mis-tareas"
@using Microsoft.EntityFrameworkCore
@using taskUser.Data
@using taskUser.Models
@using Blazored.SessionStorage

@inject TareasAppContext db
@inject NavigationManager nav
@inject ISessionStorageService sessionStorage

@rendermode InteractiveServer

<div class="container-xl custom-container separar">
    <h3 class="text-center text-acento mb-4">
        <i class="fas fa-tasks me-2"></i>Mis Tareas
    </h3>

    @if (isLoading)
    {
        <div class="text-center mt-5">
            <div class="spinner-border text-info" role="status"></div>
            <p class="mt-3">Cargando tareas...</p>
        </div>
    }
    else if (tareas == null || tareas.Count == 0)
    {
        <div class="alert alert-warning text-center mt-5">
            <i class="fas fa-exclamation-circle me-2"></i>No tienes tareas asignadas.
        </div>
    }
    else
    {
        <div class="row g-4 pad">
            @foreach (var tarea in tareas)
            {
                <div class="col-12 col-sm-6 col-lg-3">
                    <div class="card custom-card pulsante h-100">
                        <div class="card-header bg-dark text-white d-flex justify-content-between align-items-center">
                            <span class="fw-semibold text-acento">
                                <i class="fas fa-clipboard-list me-2"></i>@tarea.Titulo
                            </span>
                            @if (tarea.Completada)
                            {
                                <i class="fas fa-check-circle text-success" title="Tarea completada"></i>
                            }
                        </div>
                        <div class="card-body bg-light">
                            <p class="card-text">@tarea.Descripcion</p>
                        </div>
                        <div class="card-footer bg-dark border-top-0 d-flex justify-content-start gap-2">
                            <button class="btn btn-sm btn-outline-acento" @onclick="() => verDetalles(tarea.Id)">
                                <i class="fas fa-eye me-1"></i>Ver
                            </button>
                            <button class="btn btn-sm btn-outline-danger" @onclick="() => mostrarConfirmacion(tarea.Id)">
                                <i class="fas fa-trash-alt me-1"></i>Eliminar
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }

    @if (mostrarModalConfirmacion)
    {
        <div class="custom-modal-overlay">
            <div class="custom-modal">
                <h5 class="mb-3">
                    <i class="fas fa-exclamation-triangle text-warning me-2"></i>¿Eliminar tarea?
                </h5>
                <p>¿Estás seguro de que deseas eliminar esta tarea?</p>
                <div class="modal-buttons mt-4">
                    <button class="btn btn-secondary" @onclick="() => mostrarModalConfirmacion = false">Cancelar</button>
                    <button class="btn btn-danger" @onclick="ConfirmarEliminar">Sí, eliminar</button>
                </div>
            </div>
        </div>
    }

    @if (mostrarModalExito)
    {
        <div class="custom-modal-overlay">
            <div class="custom-modal">
                <h5>
                    <i class="fas fa-check-circle text-success me-2"></i>¡Tarea eliminada con éxito!
                </h5>
                <div class="modal-buttons mt-4">
                    <button class="btn btn-primary" @onclick="() => mostrarModalExito = false">Aceptar</button>
                </div>
            </div>
        </div>
    }

    <button class="btn btn-info btn-flotante pulsante" @onclick="crearlaTarea">
        <i class="fas fa-plus"></i>
    </button>
</div>

<style>

    .separar{
        padding-top: 6rem;
    }


    .text-acento {
        color: #20c997 !important;
        text-shadow: 0 0 5px rgba(32, 201, 151, 0.6);
    }

    .custom-container {
        max-width: 1200px;
        padding-left: 2rem;
        padding-right: 2rem;
    }

    .pad {
        padding: 3rem;
    }

    .custom-card {
        background-color: #1e1e1e;
        border: 2px solid #20c997;
        border-radius: 16px;
        box-shadow: 0 0 10px rgba(32, 201, 151, 0.4);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

        .custom-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 0 16px rgba(32, 201, 151, 0.8);
        }

    .btn-outline-acento {
        border: 2px solid #20c997;
        color: #20c997 !important;
        background-color: transparent;
        box-shadow: 0 0 4px rgba(32, 201, 151, 0.3);
        transition: all 0.3s ease;
    }

        .btn-outline-acento i {
            color: inherit !important;
        }

        .btn-outline-acento:hover {
            background-color: #20c997;
            color: white !important;
        }

            .btn-outline-acento:hover i {
                color: white !important;
            }

    .btn-outline-danger {
        border: 2px solid #dc3545;
        color: #dc3545;
        transition: all 0.3s ease;
    }

        .btn-outline-danger:hover {
            background-color: #dc3545;
            color: white;
            box-shadow: 0 0 10px rgba(220, 53, 69, 0.6);
        }

    .custom-modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 9999;
    }

    .custom-modal {
        background-color: #1e1e1e;
        color: white;
        padding: 2rem;
        border-radius: 12px;
        max-width: 400px;
        text-align: center;
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
    }

    .modal-buttons {
        display: flex;
        justify-content: space-around;
    }

    .btn-flotante {
        position: fixed;
        bottom: 30px;
        right: 60px;
        border-radius: 100%;
        width: 40px;
        height: 40px;
        font-size: 24px;
        background-color: #20c997!important;
        color: #fff;
        z-index: 10000;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: transform 0.2s ease, box-shadow 0.3s ease;
        box-shadow: 0 0 12px rgba(32, 201, 151, 0.6);
    }

        .btn-flotante:hover {
            transform: scale(1.1);
            box-shadow: 0 0 20px rgba(32, 201, 151, 0.9);
        }

    /* Efecto pulsante neon */
    @@keyframes pulsarNeon {
        0%

    {
        box-shadow: 0 0 8px rgba(32, 201, 151, 0.4);
    }

    50% {
        box-shadow: 0 0 18px rgba(32, 201, 151, 0.8);
    }

    100% {
        box-shadow: 0 0 8px rgba(32, 201, 151, 0.4);
    }

    }

    .pulsante {
        animation: pulsarNeon 2s infinite;
    }
</style>

@code {
    private List<Tarea> tareas = new();
    private int adminId;
    private bool isLoading = true;
    private int tareaAEliminarId;
    private bool mostrarModalConfirmacion = false;
    private bool mostrarModalExito = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var idStr = await sessionStorage.GetItemAsync<string>("adminKey");

            if (int.TryParse(idStr, out adminId) && adminId > 0)
            {
                tareas = await db.Tareas.Where(t => t.AdminInfoId == adminId).ToListAsync();
            }
            else
            {
                nav.NavigateTo("/login");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al obtener las tareas: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void verDetalles(int tareaId)
    {
        nav.NavigateTo($"/detalles-tarea/{tareaId}");
    }

    private void mostrarConfirmacion(int tareaId)
    {
        tareaAEliminarId = tareaId;
        mostrarModalConfirmacion = true;
    }

    private async Task ConfirmarEliminar()
    {
        var tarea = await db.Tareas.FindAsync(tareaAEliminarId);

        if (tarea != null)
        {
            db.Tareas.Remove(tarea);
            await db.SaveChangesAsync();

            tareas = await db.Tareas.Where(t => t.AdminInfoId == adminId).ToListAsync();
        }

        mostrarModalConfirmacion = false;
        mostrarModalExito = true;
    }

    public void crearlaTarea()
    {
        nav.NavigateTo("/crear-tarea");
    }
}
