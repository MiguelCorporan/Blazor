@page "/mis-tareas"
@using Microsoft.EntityFrameworkCore
@using taskUser.Data
@using taskUser.Models
@using Blazored.SessionStorage

@inject TareasAppContext db
@inject NavigationManager nav
@inject ISessionStorageService sessionStorage

@rendermode InteractiveServer

<h3 class="text-center mb-4">Mis Tareas</h3>

@if (isLoading)
{
    <div class="text-center mt-5">
        <div class="spinner-border" role="status"></div>
        <p class="mt-3">Cargando...</p>
    </div>
}
else if (tareas == null || tareas.Count == 0)
{
    <div class="alert alert-warning text-center mt-5">
        No tienes tareas asignadas.
    </div>
    <button class="btn btn-primary mt-3" @onclick="Volver">Crear tarea</button>
}
else
{
    <div class="container my-4">
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
            @foreach (var tarea in tareas)
            {
                <div class="col">
                    <div class="card h-100 shadow-sm">
                        <div class="card-body">
                            <h5 class="card-title">
                                @tarea.Titulo
                                @if (tarea.Completada)
                                {
                                    <i class="bi bi-check-circle-fill text-success ms-2" title="Tarea completada"></i>
                                }
                            </h5>
                            <p class="card-text">@tarea.Descripcion</p>
                        </div>
                        <div class="card-footer d-flex justify-content-between">
                            <button class="btn btn-info btn-sm" @onclick="() => verDetalles(tarea.Id)">Ver Detalles</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => mostrarConfirmacion(tarea.Id)">Eliminar</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@if (mostrarModalConfirmacion)
{
    <div class="custom-modal-overlay">
        <div class="custom-modal">
            <h5>¿Estás seguro de que deseas eliminar esta tarea?</h5>
            <div class="modal-buttons">
                <button class="btn btn-secondary" @onclick="() => mostrarModalConfirmacion = false">Cancelar</button>
                <button class="btn btn-danger" @onclick="ConfirmarEliminar">Sí, eliminar</button>
            </div>
        </div>
    </div>
}

@if (mostrarModalExito)
{
    <div class="custom-modal-overlay">
        <div class="custom-modal">
            <h5>¡Tarea eliminada con éxito!</h5>
            <div class="modal-buttons">
                <button class="btn btn-primary" @onclick="() => mostrarModalExito = false">Aceptar</button>
            </div>
        </div>
    </div>
}

<style>
    .custom-modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 9999;
    }

    .custom-modal {
        background-color: white;
        padding: 2rem;
        border-radius: 10px;
        max-width: 400px;
        text-align: center;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
    }

    .modal-buttons {
        margin-top: 1.5rem;
        display: flex;
        justify-content: space-around;
    }
</style>

@code {
    private List<Tarea> tareas = new();
    private int adminId;
    private bool isLoading = true;
    private int tareaAEliminarId;
    private bool mostrarModalConfirmacion = false;
    private bool mostrarModalExito = false;
    private bool datosCargados = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !datosCargados)
        {
            try
            {
                var idStr = await sessionStorage.GetItemAsync<string>("adminKey");

                if (int.TryParse(idStr, out adminId) && adminId > 0)
                {
                    tareas = await db.Tareas
                        .Where(t => t.AdminInfoId == adminId)
                        .ToListAsync();
                }
                else
                {
                    nav.NavigateTo("/login");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al obtener las tareas: {ex.Message}");
            }
            finally
            {
                isLoading = false;
                datosCargados = true;
                StateHasChanged();
            }
        }
    }

    private void verDetalles(int tareaId)
    {
        nav.NavigateTo($"/detalles-tarea/{tareaId}");
    }

    private void mostrarConfirmacion(int tareaId)
    {
        tareaAEliminarId = tareaId;
        mostrarModalConfirmacion = true;
    }

    private async Task ConfirmarEliminar()
    {
        var tarea = await db.Tareas.FindAsync(tareaAEliminarId);

        if (tarea != null)
        {
            db.Tareas.Remove(tarea);
            await db.SaveChangesAsync();

            tareas = await db.Tareas
                .Where(t => t.AdminInfoId == adminId)
                .ToListAsync();
        }

        mostrarModalConfirmacion = false;
        mostrarModalExito = true;
    }

    private void Volver()
    {
        nav.NavigateTo("/crear-tarea");
    }
}
