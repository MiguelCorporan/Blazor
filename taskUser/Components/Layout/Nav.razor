@using Blazored.SessionStorage
@inject NavigationManager navigation
@inject ISessionStorageService sessionStorage

@rendermode InteractiveServer

<nav class="custom-navbar">
    <div class="navbar-content">
        <!-- Logo -->
        <a class="navbar-logo @(IsAuthPage || IsCrearTareaPage ? "white-text" : "")" href="/">TaskApp</a>

        <!-- Botones -->
        <div class="navbar-buttons">
            @if (isLoggedIn)
            {
                <span class="user-name @(IsCrearTareaPage ? "white-text" : "")">@userName</span>
                <button @onclick="LogOut" class="btng @(IsCrearTareaPage ? "btn-white" : "btn-outline")">Log out</button>
            }
            else
            {
                <button @onclick="NavigateToLogin" class="btng @(IsAuthPage ? "btn-white" : "btn-outline")">Login</button>
                <button @onclick="NavigateToRegister" class="btng btn-filled">Registro</button>
            }
        </div>
    </div>
</nav>

<style>
    .custom-navbar {
        width: 100%;
        padding: 0.75rem 2rem;
        border-radius: 0.5rem;
        margin: 1rem auto;
        max-width: 1320px;
    }

    .navbar-content {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .navbar-logo {
        font-size: 1.5rem;
        font-weight: 700;
        color: black;
        text-decoration: none;
        transition: color 0.3s ease;
    }

    .navbar-buttons {
        display: flex;
        gap: 0.5rem;
        align-items: center;
    }

    .btng {
        padding: 0.4rem 0.9rem;
        font-weight: 500;
        border-radius: 999px;
        font-size: 0.9rem;
        border: none;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .btn-outline {
        border: 1px solid black;
        background-color: transparent;
        color: black;
    }

        .btn-outline:hover {
            background-color: #f0f0f0;
        }

    .btn-filled {
        background-color: #20c997 !important;
        color: white;
        border: none;
    }

        .btn-filled:hover {
            background-color: #198754;
        }

    .btn-white {
        background-color: transparent;
        color: white;
        border: 1px solid white;
    }

        .btn-white:hover {
            background-color: rgba(255, 255, 255, 0.1);
            color: white;
        }

    .white-text {
        color: white !important;
    }

    .user-name {
        font-weight: 600;
        margin-right: 0.5rem;
    }

    @@media (max-width: 768px) {
        .custom-navbar {
            margin: 0.5rem;
        }

        .navbar-content {
            flex-direction: column;
            align-items: flex-start;
        }

        .navbar-buttons {
            margin-top: 0.5rem;
            flex-wrap: wrap;
        }
    }
</style>

@code {
    private bool isLoggedIn = false;
    private string userName = string.Empty;

    private bool IsAuthPage => navigation.Uri.Contains("/login") || navigation.Uri.Contains("/register");
    private bool IsCrearTareaPage => navigation.Uri.Contains("/crear-tarea") || navigation.Uri.Contains("/mis-tareas") || navigation.Uri.Contains("/detalles-tarea/");

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var storedUsername = await sessionStorage.GetItemAsync<string>("AdminName");
        if (!string.IsNullOrEmpty(storedUsername))
        {
            isLoggedIn = true;
            userName = storedUsername;
            StateHasChanged(); // Actualiza la interfaz de usuario
        }
        else
        {
            isLoggedIn = false;
            userName = string.Empty;
        }
    }

    private async Task LogOut()
    {
        await sessionStorage.ClearAsync();
        isLoggedIn = false;
        userName = string.Empty;
        navigation.NavigateTo("/login");
    }

    private void NavigateToLogin()
    {
        navigation.NavigateTo("/login");
    }

    private void NavigateToRegister()
    {
        navigation.NavigateTo("/register");
    }
}
